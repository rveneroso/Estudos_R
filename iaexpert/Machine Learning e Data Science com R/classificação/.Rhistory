1+1
sigmoide = function(soma) {
return (1 / (1 + exp(-soma)))
}
#a = exp(1)
#a = exp(2)
#a = sigmoide(50)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), nrow = 4, ncol = 2, byrow = T)
saidas = matrix(c(0, 1, 1, 0))
pesos0 = matrix(c(-0.424, -0.740, -0.961, 0.358, -0.577, -0.469), nrow = 2, ncol = 3, byrow = T)
pesos1 = matrix(c(-0.017, -0.893, 0.148), nrow = 3, ncol = 1, byrow = T)
epocas = 100
camadaEntrada = entradas
View(camadaEntrada)
somaSinapse0 = camadaEntrada %*% pesos0
View(somaSinapse0)
View(somaSinapse0)
camadaOculta = sigmoide(somaSinapse0)
View(camadaOculta)
View(camadaOculta)
View(pesos1)
somaSinapse1 = camadaOculta %*% pesos1
View(somaSinapse1)
camadaSaida = sigmoide(somaSinapse1)
View(camadaSaida)
View(saidas)
View(camadaSaida)
View(saidas)
View(camadaSaida)
erroCamadaSaida = saidas - camadaSaida
View(erroCamadaSaida)
mediaAbsoluta = mean(abs(erroCamadaSaida))
a = sigmoide(50)
sigmoideDerivada = function(sig) {
return (sig * (1 - sig))
}
b = sigmoideDerivada(a)
b = sigmoideDerivada(50)
a = sigmoide(0)
b = sigmoideDerivada(a)
View(camadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
View(erroCamadaSaida)
deltaSaida = erroCamadaSaida - derivadaSaida
View(deltaSaida)
View(deltaSaida)
View(deltaSaida)
View(erroCamadaSaida)
View(derivadaSaida)
deltaSaida = erroCamadaSaida * derivadaSaida
View(deltaSaida)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
dim(cars)
cars
a = cars
View(a)
View(a)
write.csv(a)
setwd("~/")
write.csv(a)
write.csv(a, 'cars.csv')
cor(cars)
a = mtcars
write.csv(a, 'mt_cars.csv')
a = AirPassengers
write.csv(a, file = 'airpassengers.csv')
setwd("~/")
write.csv(a, file = 'airpassengers.csv')
sys.sample = function(N,n){
k = ceiling(N/n)
#ceiling(x) rounds to the nearest integer that’s larger than x.
#This means ceiling (2.1) = 3
r = sample(1:k, 1)
sys.samp = seq(r, r + k*(n-1), k)
cat("The selected systematic sample is: \"", sys.samp, "\"\n")
# Note: the last command "\"\n" prints the result in a new line
}
sys.sample(50, 5)
r = sample(1:10, 1)
sys.sample(50, 5)
r = sample(1:10, 1)
iris
install.packages("devtools")
devtools::install_github("trnnick/TStools")
devtools::install_github("trnnick/TStools", force = TRUE)
matriz <- as.matrix(dados)
TStools::nemenyi(matriz,conf.int=0.95, plottype="vline")
tsutils::nemenyi(matriz,conf.int=0.95, plottype="vline")
1 + 1
sqrt(25)
?sqrt
x <- 5
x = 5
x = x + 4
vetor1 = c(10, 5, 8, 9, 7)
vetor1 * 2
sqrt(vetor1)
mean(vetor1)
length(vetor1)
sum(vetor1)
max(vetor1)
min(vetor1)
vetor1[0]
vetor1[2]
vetor1 > 0
vetor1 > 3
vetor1 > 10
vetor1 > 7
vetor1[vetor1 > 0]
vetor1[vetor1 > 7]
vetor1 > 7
vetor1[vetor1 > 7]
vetor1
vetor1[vetor1 == 10]
vetor1[vetor1 != 10]
library(SDSFoundations)
install.packages('SDSFoundations')
library(SDSFoundations)
install.packages('SDSFoundations')
BikeData
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL)
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = 'binary')
library(SDSFoundations)
BikeData
cls
clear
clean
limpar
limpe
library(SDSFoundations)
bike = BikeData
View(bike)
mean(bike$distance)
View(bike)
table(bike$cyc_freq)
table(bike$gender)
bike[2,5]
View(bike)
bike[,5]
bike[,6]
bike[,5]
bike$gender == 'F'
bike$gender == 'F'
f = bike[bike$gender == 'F',]
View(f)
fv = f$speed
fv
mean(fv)
m = bike[bike$gender == 'M',]
View(m)
mv = m$speed
mean(mv)
table(bike$student)
estudante = bike[bike$student == 1,]
View(estudante)
table(estudante$cyc_freq)
distancia_estudante = estudante$distance
distancia_estudante
mean(distancia_estudante)
mean(estudante$distance)
mean(bike[bike[bike$student == 1], 7)
mean(bike[bike[bike$student == 1], 7))
mean(bike[bike[bike$student == 1]], 7)
mean(bike[bike[bike$student == 1], 7])
mean(bike[bike[bike$student == 1, 7])
mean(bike[bike[bike$student == 1, 7]])
mean(bike[bike$student == 1, 7])
runif(100)
runif(100, 0, 9)
runif(1, 1, 50)
runif(1, 1, 50)
runif(1, 1, 50)
runif(3, 1, 50)
runif(7, 1, 150)
runif(7; 1; 150)
runif(7, 1, 150)
jogadores = c(40000,18000,12000,250000,30000,
140000,300000,40000,800000)
mean(jogadores)
median(jogadores)
quartis  = quantile(jogadores)
quartis
quartis[4]
max(jogadores) - min(jogadores)
sd(jogadores)
summary(jogadores)
setwd("~/Cursos/Machine Learning e Data Science com R/classificação")
# Leitura da base de dados
base = read.csv('credit_data.csv')
# Apaga a coluna clientid
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
install.packages('e1071')
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
classificador
