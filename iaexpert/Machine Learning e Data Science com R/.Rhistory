1+1
sigmoide = function(soma) {
return (1 / (1 + exp(-soma)))
}
#a = exp(1)
#a = exp(2)
#a = sigmoide(50)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), nrow = 4, ncol = 2, byrow = T)
saidas = matrix(c(0, 1, 1, 0))
pesos0 = matrix(c(-0.424, -0.740, -0.961, 0.358, -0.577, -0.469), nrow = 2, ncol = 3, byrow = T)
pesos1 = matrix(c(-0.017, -0.893, 0.148), nrow = 3, ncol = 1, byrow = T)
epocas = 100
camadaEntrada = entradas
View(camadaEntrada)
somaSinapse0 = camadaEntrada %*% pesos0
View(somaSinapse0)
View(somaSinapse0)
camadaOculta = sigmoide(somaSinapse0)
View(camadaOculta)
View(camadaOculta)
View(pesos1)
somaSinapse1 = camadaOculta %*% pesos1
View(somaSinapse1)
camadaSaida = sigmoide(somaSinapse1)
View(camadaSaida)
View(saidas)
View(camadaSaida)
View(saidas)
View(camadaSaida)
erroCamadaSaida = saidas - camadaSaida
View(erroCamadaSaida)
mediaAbsoluta = mean(abs(erroCamadaSaida))
a = sigmoide(50)
sigmoideDerivada = function(sig) {
return (sig * (1 - sig))
}
b = sigmoideDerivada(a)
b = sigmoideDerivada(50)
a = sigmoide(0)
b = sigmoideDerivada(a)
View(camadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
View(erroCamadaSaida)
deltaSaida = erroCamadaSaida - derivadaSaida
View(deltaSaida)
View(deltaSaida)
View(deltaSaida)
View(erroCamadaSaida)
View(derivadaSaida)
deltaSaida = erroCamadaSaida * derivadaSaida
View(deltaSaida)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
# Leitura da base de dados
base = read.csv('credit_data.csv')
# Apaga a coluna clientid
base$clientid = NULL
# Valores inconsistentes
base$age = ifelse(base$age < 0, 40.92, base$age)
# Valores faltantes
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
# Divis?o entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
setwd("~/Cursos/Machine Learning e Data Science com R")
# Leitura da base de dados
base = read.csv('credit_data.csv')
# Apaga a coluna clientid
base$clientid = NULL
# Valores inconsistentes
base$age = ifelse(base$age < 0, 40.92, base$age)
# Valores faltantes
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
# Divis?o entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
#print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
#print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[, 4], previsoes)
matriz_confusao
matriz_confusao2 = table(previsoes, base_teste[, 4])
matriz_confusao2
library(caret)
confusionMatrix(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao2)
previsoes
View(base_teste)
a = previsoes
# Leitura da base de dados
base = read.csv('credit_data.csv')
# Apaga a coluna clientid
base$clientid = NULL
# Valores inconsistentes
base$age = ifelse(base$age < 0, 40.92, base$age)
# Valores faltantes
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento
base[, 1:3] = scale(base[, 1:3])
# Encode para a classe
base$default = factor(base$default, levels = c(0,1))
# Divis?o entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.95)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#install.packages('randomForest')
library(randomForest)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 30)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[, 4], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
matriz_confusao
# Leitura da base de dados
base = read.csv('credit_data.csv')
# Apaga a coluna clientid
base$clientid = NULL
# Valores inconsistentes
base$age = ifelse(base$age < 0, 40.92, base$age)
# Valores faltantes
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Escalonamento
base[, 1:3] = scale(base[, 1:3])
# Encode para a classe
base$default = factor(base$default, levels = c(0,1))
# Divis?o entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.98)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#install.packages('randomForest')
library(randomForest)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 30)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[, 4], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
matriz_confusao
previsoes
View(base_teste)
matriz_confusao2
matriz_confusao2 = table(previsoes, base_teste[, 4])
matriz_confusao2
matriz_confusao
matriz_confusao2
library(caret)
confusionMatrix(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao2)
