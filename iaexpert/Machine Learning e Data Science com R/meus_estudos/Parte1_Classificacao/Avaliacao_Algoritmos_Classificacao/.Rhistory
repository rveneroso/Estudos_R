base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(caret)
resultados30 = c()
for (i in 1:30) {
controle_treinamento = trainControl(method = 'cv', number = 10)
modelo = train(default ~ ., data = base, trControl = controle_treinamento, method = 'rpart')
precisao = modelo$results$Accuracy[2]
print(precisao)
resultados30 = c(resultados30, precisao)
}
for (i in 1:30) {
cat(gsub('[.]', ',', resultados30[i]))
cat('\n')
}
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
setwd("~/Estudos_R/iaexpert/Machine Learning e Data Science com R/meus_estudos/Parte1_Classificacao/Avaliacao_Algoritmos_Classificacao")
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(caret)
resultados30 = c()
for (i in 1:30) {
controle_treinamento = trainControl(method = 'cv', number = 10)
modelo = train(default ~ ., data = base, trControl = controle_treinamento, method = 'rpart')
precisao = modelo$results$Accuracy[2]
print(precisao)
resultados30 = c(resultados30, precisao)
}
install.packages('devtools')
devtools::install_github('trnnic/TSTools')
require('TStools')
dados = read.csv('dados_teste.csv')
dados = read.csv('dados_testes.csv')
matriz = as.matrix(dados)
View(matriz)
TStools::nemenyi(matriz, conf.int = 0.95, plot = 'vline')
install.packages('tsutils')
tsutils::nemenyi(matriz, confint(0.95), plottype = 'vline')
tsutils::nemenyi(matriz, conf.level = 0.95, plottype = 'vline')
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(caret)
controle_treinamento = trainControl(method = 'repeatedcv', number = 10, repeats = 30)
modelo = train(default ~., data = base, trControl = controle_treinamento, method = 'rf')
print(modelo)
precisao = modelo$results$Accuracy[2]
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(caret)
controle_treinamento = trainControl(method = 'repeatedcv', number = 10, repeats = 2)
modelo = train(default ~., data = base, trControl = controle_treinamento, method = 'rf')
print(modelo)
precisao = modelo$results$Accuracy[2]
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
library(randomForest)
classificadorRandomForest = randomForest(x = base[-4], y = base$default, ntree = 30, mtry = 2)
library(h2o)
h2o.init(nthreads = -1)
classificadorRedeNeural = h2o.deeplearning(y = 'default', training_frame = as.h2o(base),
activation = 'Rectifier', hidden = c(100), epochs = 100)
saveRDS(classificadorRandomForest, 'rfFinal.rds')
saveRDS(classificadorRedeNeural, 'rnaFinal.rds')
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
rfFinal = readRDS('rfFinal.rds')
previsoesrf = predict(rfFinal, newdata = base[1, -4])
rnaFinal = readRDS('rnaFinal.rds')
previsoesrna = predict(rnaFinal, newdata = as.h2o(base[-4]))
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base$default = factor(base$default, levels = c(0,1))
rfFinal = readRDS('rfFinal.rds')
previsoesrf = predict(rfFinal, newdata = base[1, -4])
rnaFinal = readRDS('rnaFinal.rds')
previsoesrna = predict(rnaFinal, newdata = as.h2o(base[-4]))
