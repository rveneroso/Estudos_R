setwd("~/Estudos_R/iaexpert/Machine Learning e Data Science com R")
setwd("~/Estudos_R/iaexpert/Machine Learning e Data Science com R/meus_estudos")
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age[base$age < 0 | is.na(base$age)] = mean(base$age[base$age > 0], na.rm = TRUE)
# O R tem uma função que faz o escalonamento de toda a base de uma só vez. Porém, o escalonamento não deve ser aplicado
# no atributo meta pois, além de não fazer sentido, dificulta o entendimento.
# Portanto, serão escalonados os atributos 1 a 3 em todas as linhas.
base[, 1:3] = scale(base[, 1:3])
View(base)
base = read.csv('census.csv')
View(base)
base$X = NULL
View(base)
# Cria uma tabela com o total de ocorrências distintas no atributo
table(base$sex)
# Para se obter a relação dos valores distintos do atributo sex pode ser utilizado o comando abaixo
unique(base$sex)
# Para converter o valor Female para 0 e Male para 1 na base de dados
base = factor(base, levels = c(' Female',' Male'), labels = c(0,1))
base = read.csv('census.csv')
base$X = NULL
# Para converter o valor Female para 0 e Male para 1 na base de dados
base$sex = factor(base, levels = c(' Female',' Male'), labels = c(0,1))
base = read.csv('census.csv')
base$X = NULL
# Cria uma tabela com o total de ocorrências distintas no atributo sex
table(base$sex)
# Para se obter a relação dos valores distintos do atributo sex pode ser utilizado o comando abaixo
unique(base$sex)
# Para converter o valor Female para 0 e Male para 1 na base de dados
base$sex = factor(base$sex, levels = c(' Female',' Male'), labels = c(0,1))
View(base)
# Verificando se existem NA no atributo sex
base(is.na(base$sex))
# Verificando se existem NA no atributo sex
base[is.na(base$sex)]
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
View(base)
# Escalonando atributos
base[, 1] = scale(base[, 1])
View(base)
base[, 3] = scale(base[, 3])
View(base)
base[, 5] = scale(base[, 5])
View(base)
View(base)
View(base)
base[, 11:13] = scale(base[, 11:13])
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age[base$age < 0 | is.na(base$age)] = mean(base$age[base$age > 0], na.rm = TRUE)
# O R tem uma função que faz o escalonamento de toda a base de uma só vez. Porém, o escalonamento não deve ser aplicado
# no atributo meta pois, além de não fazer sentido, dificulta o entendimento.
# Portanto, serão escalonados os atributos 1 a 3 em todas as linhas.
base[, 1:3] = scale(base[, 1:3])
install.packages('caTools')
install.packages('caTools')
# Usando a biblioteca caTools
library(caTools)
# O comando abaixo é para garantir que a divisão da base de dados seja a mesma utilizada pelo Jones na aula
set.seed(1)
divisao = sample.split(base$default)
# Cria a base de dados de treinamento com 75% dos dados
divisao = sample.split(base$default, SplitRatio = 0.75)
View(base)
View(base)
divisao
base_treinamento = subset(base, divisao=TRUE)
# Define o conjunto de registros que irão compor a base de dados de treinamento com 75% dos dados
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao = TRUE)
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age[base$age < 0 | is.na(base$age)] = mean(base$age[base$age > 0], na.rm = TRUE)
base[, 1:3] = scale(base[, 1:3])
set.seed(1)
# Define o conjunto de registros que irão compor a base de dados de treinamento com 75% dos dados
divisao = sample.split(base$default, SplitRatio = 0.75)
divisao
base_treinamento = subset(base, divisao = TRUE)
base_treinamento = subset(base, divisao == TRUE)
View(base_treinamento)
# Cria a base de testes
base_treinamento = subset(base, divisao == FALSE)
View(base_treinamento)
View(base_treinamento)
#
# Ao se visualizar o conteúdo da variável divisao (através da console no RStudio), os registros marcados com TRUE
# são aqueles que irão fazer parte da base de treinamento. Os que estão marcados com FALSE não irão compor a base
# de treinamento.
#
#
# Cria a base de treinamento
base_treinamento = subset(base, divisao == TRUE)
# Cria a base de testes
base_teste = subset(base, divisao == FALSE)
base = read.csv('census.csv')
base$X = NULL
# Cria uma tabela com o total de ocorrências distintas no atributo sex
table(base$sex)
# Obtendo a relação dos valores distintos do atributo sex
unique(base$sex)
# Convertendo o valor Female para 0 e Male para 1 na base de dados
base$sex = factor(base$sex, levels = c(' Female',' Male'), labels = c(0,1))
# Verificando se existem NA no atributo sex
base[is.na(base$sex)]
# Convertendo os demais atributos da base do censo
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonando atributos
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
base = read.csv('census.csv')
base$X = NULL
# Cria uma tabela com o total de ocorrências distintas no atributo sex
table(base$sex)
# Obtendo a relação dos valores distintos do atributo sex
unique(base$sex)
# Convertendo o valor Female para 0 e Male para 1 na base de dados
base$sex = factor(base$sex, levels = c(' Female',' Male'), labels = c(0,1))
# Verificando se existem NA no atributo sex
base[is.na(base$sex)]
# Convertendo os demais atributos da base do censo
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
# Escalonando atributos
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
# Usando a biblioteca caTools
library(caTools)
# O comando abaixo é para garantir que a divisão da base de dados seja a mesma utilizada pelo Jones na aula
set.seed(1)
# Define o conjunto de registros que irão compor a base de dados de treinamento com 75% dos dados
divisao = sample.split(base$default, SplitRatio = 0.75)
#
# Ao se visualizar o conteúdo da variável divisao (através da console no RStudio), os registros marcados com TRUE
# são aqueles que irão fazer parte da base de treinamento. Os que estão marcados com FALSE não irão compor a base
# de treinamento.
#
#
# Cria a base de treinamento
base_treinamento = subset(base, divisao == TRUE)
# Cria a base de testes
base_teste = subset(base, divisao == FALSE)
# Usando a biblioteca caTools
library(caTools)
# O comando abaixo é para garantir que a divisão da base de dados seja a mesma utilizada pelo Jones na aula
set.seed(1)
# Define o conjunto de registros que irão compor a base de dados de treinamento com 85% dos dados
divisao = sample.split(base$income, SplitRatio = 0.85)
#
# Ao se visualizar o conteúdo da variável divisao (através da console no RStudio), os registros marcados com TRUE
# são aqueles que irão fazer parte da base de treinamento. Os que estão marcados com FALSE não irão compor a base
# de treinamento.
#
#
# Cria a base de treinamento
base_treinamento = subset(base, divisao == TRUE)
# Cria a base de testes
base_teste = subset(base, divisao == FALSE)
setwd("~/Estudos_R/iaexpert/Machine Learning e Data Science com R/meus_estudos/Parte3_Regras_Associacao/Algoritmo_ECLAT")
library(arules)
base = read.transactions('mercado2.csv', sep = ',', rm.duplicates = TRUE)
itemsets = eclat(data = base, parameter = list(support = 0.003, minlen = 3))
inspect(sort(itemsets, by = 'support'))
setwd("~/Estudos_R/iaexpert/Machine Learning e Data Science com R/meus_estudos/Parte4_Agrupamentos/k-means")
idade = c(20,  27,  21,  37,  46, 53, 55,  47,  52,  32,  39,  41,  39,  48,  48)
salario = c(1000,1200,2900,1850,900,950,2000,2100,3000,5900,4100,5100,7000,5000,6500)
base = data.frame(idade, salario)
base = scale(base)
plot(idade, salario)
set.seed(1)
kmeans = kmeans(x = base, centers = 3)
centroides = kmeans$centers
previsoes = kmeans$cluster
library(cluster)
clusplot(base, previsoes, xlab = 'Salario', ylab = 'Idade', main = 'Agrupamento salarios',
lines = 0, shade = TRUE, color = TRUE, labels = 2)
base = iris
base2 = base[1:2]
set.seed(1)
kmeans = kmeans(x = base2, centers = 3)
previsoes = kmeans$cluster
library(cluster)
clusplot(base2, previsoes, color = TRUE)
table(base$Species, previsoes)
base = read.csv('credit_card_clients.csv', header = TRUE)
base$BILL_TOTAL = base$BILL_AMT1 + base$BILL_AMT2 + base$BILL_AMT3 + base$BILL_AMT4 + base$BILL_AMT5 + base$BILL_AMT6
X = data.frame(limite = base$LIMIT_BAL, gasto  = base$BILL_TOTAL)
X = scale(X)
set.seed(1)
wcss = vector()
for (i in 1:10) {
kmeans = kmeans(x = X, centers = i)
wcss[i] = sum(kmeans$withinss)
}
plot(1:10, wcss, type = 'b', xlab = 'Clusters', ylab = 'WCSS')
set.seed(1)
kmeans = kmeans(x = X, centers = 5)
previsoes = kmeans$cluster
plot(X, col = previsoes)
base = read.csv('credit_card_clients.csv', header = TRUE)
base$BILL_TOTAL = base$BILL_AMT1 + base$BILL_AMT2 + base$BILL_AMT3 + base$BILL_AMT4 + base$BILL_AMT5 + base$BILL_AMT6
X = data.frame(limite = base$LIMIT_BAL, gasto = base$BILL_TOTAL, genero = base$SEX,
educacao = base$EDUCATION, civil = base$MARRIAGE, idade = base$AGE)
X = scale(X)
set.seed(1)
wcss = vector()
for (i in 1:10) {
kmeans = kmeans(x = X, centers = i)
wcss[i] = sum(kmeans$withinss)
}
plot(1:10, wcss, type = 'b', xlab = 'Clusters', ylab = 'WCSS')
set.seed(1)
kmeans = kmeans(x = X, centers = 4)
previsoes = kmeans$cluster
pairs(X, col = c(1:4)[previsoes])
