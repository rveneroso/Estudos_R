1+1
sigmoide = function(soma) {
return (1 / (1 + exp(-soma)))
}
#a = exp(1)
#a = exp(2)
#a = sigmoide(50)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), nrow = 4, ncol = 2, byrow = T)
saidas = matrix(c(0, 1, 1, 0))
pesos0 = matrix(c(-0.424, -0.740, -0.961, 0.358, -0.577, -0.469), nrow = 2, ncol = 3, byrow = T)
pesos1 = matrix(c(-0.017, -0.893, 0.148), nrow = 3, ncol = 1, byrow = T)
epocas = 100
camadaEntrada = entradas
View(camadaEntrada)
somaSinapse0 = camadaEntrada %*% pesos0
View(somaSinapse0)
View(somaSinapse0)
camadaOculta = sigmoide(somaSinapse0)
View(camadaOculta)
View(camadaOculta)
View(pesos1)
somaSinapse1 = camadaOculta %*% pesos1
View(somaSinapse1)
camadaSaida = sigmoide(somaSinapse1)
View(camadaSaida)
View(saidas)
View(camadaSaida)
View(saidas)
View(camadaSaida)
erroCamadaSaida = saidas - camadaSaida
View(erroCamadaSaida)
mediaAbsoluta = mean(abs(erroCamadaSaida))
a = sigmoide(50)
sigmoideDerivada = function(sig) {
return (sig * (1 - sig))
}
b = sigmoideDerivada(a)
b = sigmoideDerivada(50)
a = sigmoide(0)
b = sigmoideDerivada(a)
View(camadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
View(erroCamadaSaida)
deltaSaida = erroCamadaSaida - derivadaSaida
View(deltaSaida)
View(deltaSaida)
View(deltaSaida)
View(erroCamadaSaida)
View(derivadaSaida)
deltaSaida = erroCamadaSaida * derivadaSaida
View(deltaSaida)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
dim(cars)
cars
a = cars
View(a)
View(a)
write.csv(a)
setwd("~/")
write.csv(a)
write.csv(a, 'cars.csv')
cor(cars)
a = mtcars
write.csv(a, 'mt_cars.csv')
a = AirPassengers
write.csv(a, file = 'airpassengers.csv')
setwd("~/")
write.csv(a, file = 'airpassengers.csv')
sys.sample = function(N,n){
k = ceiling(N/n)
#ceiling(x) rounds to the nearest integer that’s larger than x.
#This means ceiling (2.1) = 3
r = sample(1:k, 1)
sys.samp = seq(r, r + k*(n-1), k)
cat("The selected systematic sample is: \"", sys.samp, "\"\n")
# Note: the last command "\"\n" prints the result in a new line
}
sys.sample(50, 5)
r = sample(1:10, 1)
sys.sample(50, 5)
r = sample(1:10, 1)
iris
install.packages("devtools")
devtools::install_github("trnnick/TStools")
devtools::install_github("trnnick/TStools", force = TRUE)
matriz <- as.matrix(dados)
TStools::nemenyi(matriz,conf.int=0.95, plottype="vline")
tsutils::nemenyi(matriz,conf.int=0.95, plottype="vline")
1 + 1
sqrt(25)
?sqrt
x <- 5
x = 5
x = x + 4
vetor1 = c(10, 5, 8, 9, 7)
vetor1 * 2
sqrt(vetor1)
mean(vetor1)
length(vetor1)
sum(vetor1)
max(vetor1)
min(vetor1)
vetor1[0]
vetor1[2]
vetor1 > 0
vetor1 > 3
vetor1 > 10
vetor1 > 7
vetor1[vetor1 > 0]
vetor1[vetor1 > 7]
vetor1 > 7
vetor1[vetor1 > 7]
vetor1
vetor1[vetor1 == 10]
vetor1[vetor1 != 10]
library(SDSFoundations)
install.packages('SDSFoundations')
library(SDSFoundations)
install.packages('SDSFoundations')
BikeData
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL)
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = 'binary')
library(SDSFoundations)
BikeData
cls
clear
clean
limpar
limpe
library(SDSFoundations)
bike = BikeData
View(bike)
mean(bike$distance)
View(bike)
table(bike$cyc_freq)
table(bike$gender)
bike[2,5]
View(bike)
bike[,5]
bike[,6]
bike[,5]
bike$gender == 'F'
bike$gender == 'F'
f = bike[bike$gender == 'F',]
View(f)
fv = f$speed
fv
mean(fv)
m = bike[bike$gender == 'M',]
View(m)
mv = m$speed
mean(mv)
table(bike$student)
estudante = bike[bike$student == 1,]
View(estudante)
table(estudante$cyc_freq)
distancia_estudante = estudante$distance
distancia_estudante
mean(distancia_estudante)
mean(estudante$distance)
mean(bike[bike[bike$student == 1], 7)
mean(bike[bike[bike$student == 1], 7))
mean(bike[bike[bike$student == 1]], 7)
mean(bike[bike[bike$student == 1], 7])
mean(bike[bike[bike$student == 1, 7])
mean(bike[bike[bike$student == 1, 7]])
mean(bike[bike$student == 1, 7])
runif(100)
runif(100, 0, 9)
runif(1, 1, 50)
runif(1, 1, 50)
runif(1, 1, 50)
runif(3, 1, 50)
runif(7, 1, 150)
runif(7; 1; 150)
runif(7, 1, 150)
jogadores = c(40000,18000,12000,250000,30000,
140000,300000,40000,800000)
mean(jogadores)
median(jogadores)
quartis  = quantile(jogadores)
quartis
quartis[4]
max(jogadores) - min(jogadores)
sd(jogadores)
summary(jogadores)
base = read.csv('plano_saude.csv')
setwd("~/Cursos/Machine Learning e Data Science com R/regressão")
base = read.csv('plano_saude.csv')
cor(base$idade, base$custo)
regressor = lm(formula = custo ~ idade, data = base)
summary(regressor)
cr = summary(regressor)$adj.r.squared
previsoes = predict(regressor, newdata = base[-2])
library(ggplot2)
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtitle('Idade x custo') + xlab('Idade') + ylab('Custo')
base = read.csv('plano_saude.csv')
View(base)
cor(base$idade, base$custo)
regressor = lm(formula = custo ~ idade, data = base)
summary(regressor)
b0 = regressor$coefficients[1]
b1 = regressor$coefficients[2]
cr = summary(regressor)$adj.r.squared
base[-2]
View(base)
previsoes = predict(regressor, newdata = base[-2])
previsoes
library(ggplot2)
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtitle('Idade x custo') + xlab('Idade') + ylab('Custo')
idade = c(40)
df = data.frame(idade)
View(df)
previsao1 = predict(regressor, newdata = df)
previsao1
previsao2 = b0 + b1 * 40
previsao2
base = read.csv('house_prices.csv')
View(base)
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
divisao
regressor = lm(formula = price ~ sqft_living, data = base_treinamento)
previsoes_treinamento = predict(regressor, newdata = base_treinamento[6])
library(ggplot2)
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
previsoes_teste = predict(regressor, newdata = base_teste[6])
resultado = abs(base_teste[3] - previsoes_teste)
View(resultado)
mean(resultado[['price']])
library(miscTools)
cr = rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes_teste)
base = read.csv('house_prices.csv')
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
View(base)
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ ., data = base_treinamento)
previsoes = predict(regressor, newdata = base_teste[-1])
previsoes = predict(regressor, newdata = base_teste[-1])
mean(abs(base_teste[['price']] - previsoes))
