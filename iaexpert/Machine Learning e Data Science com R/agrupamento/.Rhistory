1+1
sigmoide = function(soma) {
return (1 / (1 + exp(-soma)))
}
#a = exp(1)
#a = exp(2)
#a = sigmoide(50)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), nrow = 4, ncol = 2, byrow = T)
saidas = matrix(c(0, 1, 1, 0))
pesos0 = matrix(c(-0.424, -0.740, -0.961, 0.358, -0.577, -0.469), nrow = 2, ncol = 3, byrow = T)
pesos1 = matrix(c(-0.017, -0.893, 0.148), nrow = 3, ncol = 1, byrow = T)
epocas = 100
camadaEntrada = entradas
View(camadaEntrada)
somaSinapse0 = camadaEntrada %*% pesos0
View(somaSinapse0)
View(somaSinapse0)
camadaOculta = sigmoide(somaSinapse0)
View(camadaOculta)
View(camadaOculta)
View(pesos1)
somaSinapse1 = camadaOculta %*% pesos1
View(somaSinapse1)
camadaSaida = sigmoide(somaSinapse1)
View(camadaSaida)
View(saidas)
View(camadaSaida)
View(saidas)
View(camadaSaida)
erroCamadaSaida = saidas - camadaSaida
View(erroCamadaSaida)
mediaAbsoluta = mean(abs(erroCamadaSaida))
a = sigmoide(50)
sigmoideDerivada = function(sig) {
return (sig * (1 - sig))
}
b = sigmoideDerivada(a)
b = sigmoideDerivada(50)
a = sigmoide(0)
b = sigmoideDerivada(a)
View(camadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
View(erroCamadaSaida)
deltaSaida = erroCamadaSaida - derivadaSaida
View(deltaSaida)
View(deltaSaida)
View(deltaSaida)
View(erroCamadaSaida)
View(derivadaSaida)
deltaSaida = erroCamadaSaida * derivadaSaida
View(deltaSaida)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
dim(cars)
cars
a = cars
View(a)
View(a)
write.csv(a)
setwd("~/")
write.csv(a)
write.csv(a, 'cars.csv')
cor(cars)
a = mtcars
write.csv(a, 'mt_cars.csv')
a = AirPassengers
write.csv(a, file = 'airpassengers.csv')
setwd("~/")
write.csv(a, file = 'airpassengers.csv')
sys.sample = function(N,n){
k = ceiling(N/n)
#ceiling(x) rounds to the nearest integer that’s larger than x.
#This means ceiling (2.1) = 3
r = sample(1:k, 1)
sys.samp = seq(r, r + k*(n-1), k)
cat("The selected systematic sample is: \"", sys.samp, "\"\n")
# Note: the last command "\"\n" prints the result in a new line
}
sys.sample(50, 5)
r = sample(1:10, 1)
sys.sample(50, 5)
r = sample(1:10, 1)
iris
install.packages("devtools")
devtools::install_github("trnnick/TStools")
devtools::install_github("trnnick/TStools", force = TRUE)
matriz <- as.matrix(dados)
TStools::nemenyi(matriz,conf.int=0.95, plottype="vline")
tsutils::nemenyi(matriz,conf.int=0.95, plottype="vline")
1 + 1
sqrt(25)
?sqrt
x <- 5
x = 5
x = x + 4
vetor1 = c(10, 5, 8, 9, 7)
vetor1 * 2
sqrt(vetor1)
mean(vetor1)
length(vetor1)
sum(vetor1)
max(vetor1)
min(vetor1)
vetor1[0]
vetor1[2]
vetor1 > 0
vetor1 > 3
vetor1 > 10
vetor1 > 7
vetor1[vetor1 > 0]
vetor1[vetor1 > 7]
vetor1 > 7
vetor1[vetor1 > 7]
vetor1
vetor1[vetor1 == 10]
vetor1[vetor1 != 10]
library(SDSFoundations)
install.packages('SDSFoundations')
library(SDSFoundations)
install.packages('SDSFoundations')
BikeData
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL)
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = 'binary')
library(SDSFoundations)
BikeData
cls
clear
clean
limpar
limpe
library(SDSFoundations)
bike = BikeData
View(bike)
mean(bike$distance)
View(bike)
table(bike$cyc_freq)
table(bike$gender)
bike[2,5]
View(bike)
bike[,5]
bike[,6]
bike[,5]
bike$gender == 'F'
bike$gender == 'F'
f = bike[bike$gender == 'F',]
View(f)
fv = f$speed
fv
mean(fv)
m = bike[bike$gender == 'M',]
View(m)
mv = m$speed
mean(mv)
table(bike$student)
estudante = bike[bike$student == 1,]
View(estudante)
table(estudante$cyc_freq)
distancia_estudante = estudante$distance
distancia_estudante
mean(distancia_estudante)
mean(estudante$distance)
mean(bike[bike[bike$student == 1], 7)
mean(bike[bike[bike$student == 1], 7))
mean(bike[bike[bike$student == 1]], 7)
mean(bike[bike[bike$student == 1], 7])
mean(bike[bike[bike$student == 1, 7])
mean(bike[bike[bike$student == 1, 7]])
mean(bike[bike$student == 1, 7])
setwd("~/Cursos/Machine Learning e Data Science com R/agrupamento")
idade = c(35, 21, 21, 22, 20, 22, 27, 23, 20, 20)
altura = c(1.70, 1.84, 1.78, 1.84, 1.65, 1.73, 1.65, 1.87, 1.80, 1.61)
base = data.frame(idade, altura)
View(base)
plot(idade, altura)
mean(base$idade)
mean(base$altura)
idade = c(35, 21, 21, 22, 20, 22, 27, 23, 20, 20, 21)
altura = c(1.70, 1.84, 1.78, 1.84, 1.65, 1.73, 1.65, 1.87, 1.80, 1.61, 1.76)
base = data.frame(idade, altura)
mean(base$idade)
mean(base$altura)
boxplot(base$idade)
boxplot(base$altura)
plot(idade, altura)
kmeans = kmeans(base, centers = 5)
kmeans = kmeans(base, centers = 3)
View(kmeans)
previsoes = kmeans$cluster
previsoes
kmeans = kmeans(base, centers = 3)
previsoes = kmeans$cluster
previsoes
set.seed(1)
kmeans = kmeans(base, centers = 3)
previsoes = kmeans$cluster
previsoes
library(cluster)
clusplot(base, previsoes, xlab = 'Altura', ylab = 'Idade',
main = 'Agrupamento',
lines = 0, shade = TRUE, color = TRUE, labels = 3)
clusplot(base, previsoes, xlab = 'Altura', ylab = 'Idade',
main = 'Agrupamento',
lines = 1, shade = TRUE, color = TRUE, labels = 3)
clusplot(base, previsoes, xlab = 'Altura', ylab = 'Idade',
main = 'Agrupamento',
lines = 0, shade = FALSE, color = TRUE, labels = 3)
base = iris
View(base)
table(base$Species)
base2 = iris[1:2]
View(base2)
kmeans = kmeans(base2, centers = 3)
previsoes = kmeans$cluster
previsoes
clusplot(base2, previsoes, color = TRUE)
table(base$Species)
table(base$Species, previsoes)
kmeans = kmeans(base, centers = 3)
View(base)
kmeans = kmeans(base[1:4], centers = 3)
previsoes = kmeans$cluster
table(base$Species, previsoes)
wines
wine
base = read.csv('credit_card_clients.csv', header = TRUE)
base$BILL_TOTAL = base$BILL_AMT1 + base$BILL_AMT2 + base$BILL_AMT3 + base$BILL_AMT4 + base$BILL_AMT5 + base$BILL_AMT6
X = data.frame(limite = base$LIMIT_BAL, gasto  = base$BILL_TOTAL)
X = scale(X)
set.seed(1)
wcss = vector()
for (i in 1:10) {
kmeans = kmeans(x = X, centers = i)
wcss[i] = sum(kmeans$withinss)
}
plot(1:10, wcss, type = 'b', xlab = 'Clusters', ylab = 'WCSS')
set.seed(1)
kmeans = kmeans(x = X, centers = 5)
previsoes = kmeans$cluster
plot(X, col = previsoes)
