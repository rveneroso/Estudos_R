1+1
sigmoide = function(soma) {
return (1 / (1 + exp(-soma)))
}
#a = exp(1)
#a = exp(2)
#a = sigmoide(50)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), nrow = 4, ncol = 2, byrow = T)
saidas = matrix(c(0, 1, 1, 0))
pesos0 = matrix(c(-0.424, -0.740, -0.961, 0.358, -0.577, -0.469), nrow = 2, ncol = 3, byrow = T)
pesos1 = matrix(c(-0.017, -0.893, 0.148), nrow = 3, ncol = 1, byrow = T)
epocas = 100
camadaEntrada = entradas
View(camadaEntrada)
somaSinapse0 = camadaEntrada %*% pesos0
View(somaSinapse0)
View(somaSinapse0)
camadaOculta = sigmoide(somaSinapse0)
View(camadaOculta)
View(camadaOculta)
View(pesos1)
somaSinapse1 = camadaOculta %*% pesos1
View(somaSinapse1)
camadaSaida = sigmoide(somaSinapse1)
View(camadaSaida)
View(saidas)
View(camadaSaida)
View(saidas)
View(camadaSaida)
erroCamadaSaida = saidas - camadaSaida
View(erroCamadaSaida)
mediaAbsoluta = mean(abs(erroCamadaSaida))
a = sigmoide(50)
sigmoideDerivada = function(sig) {
return (sig * (1 - sig))
}
b = sigmoideDerivada(a)
b = sigmoideDerivada(50)
a = sigmoide(0)
b = sigmoideDerivada(a)
View(camadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
derivadaSaida = sigmoideDerivada(camadaSaida)
View(derivadaSaida)
View(erroCamadaSaida)
deltaSaida = erroCamadaSaida - derivadaSaida
View(deltaSaida)
View(deltaSaida)
View(deltaSaida)
View(erroCamadaSaida)
View(derivadaSaida)
deltaSaida = erroCamadaSaida * derivadaSaida
View(deltaSaida)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
source('~/Arquivos/Ensino/IA Expert/Cursos/Algoritmos Genéticos em R/Fontes/algoritmo_genetico.R', echo=TRUE)
dim(cars)
cars
a = cars
View(a)
View(a)
write.csv(a)
setwd("~/")
write.csv(a)
write.csv(a, 'cars.csv')
cor(cars)
a = mtcars
write.csv(a, 'mt_cars.csv')
a = AirPassengers
write.csv(a, file = 'airpassengers.csv')
setwd("~/")
write.csv(a, file = 'airpassengers.csv')
sys.sample = function(N,n){
k = ceiling(N/n)
#ceiling(x) rounds to the nearest integer that’s larger than x.
#This means ceiling (2.1) = 3
r = sample(1:k, 1)
sys.samp = seq(r, r + k*(n-1), k)
cat("The selected systematic sample is: \"", sys.samp, "\"\n")
# Note: the last command "\"\n" prints the result in a new line
}
sys.sample(50, 5)
r = sample(1:10, 1)
sys.sample(50, 5)
r = sample(1:10, 1)
iris
setwd("~/Arquivos/Ensino/IA Expert/Cursos/Machine Learning e Data Science com R/Fontes")
base = read.csv('credit_data.csv')
View(base)
plot(base[,4], base[,4])
plot(base[,2], base[,4])
plot(base[,3], base[,4])
base$age = ifelse(base$age < 0, 40.92, base$age)
plot(base[,2], base[,3])
plot(base[,2], base[,4])
plot(base[,3], base[,4])
census = read.csv('census.csv')
View(census)
plot(base[,2], base[,4])
plot(census[,2], census[,4])
source('~/Arquivos/Ensino/IA Expert/Cursos/Machine Learning e Data Science com R/Fontes/pacote_outliers.R', echo=TRUE)
library(outliers)
credit = read.csv('credit_data.csv')
census = read.csv('census.csv')
library(outliers)
outlier(credit$age)
outlier(credit$income)
outlier(credit$loan)
outlier(census$age)
outlier(census$final.weight)
outlier(credit$age)
outlier(credit$age)
outlier(credit$age, opposite = TRUE)
outlier(credit$income)
outlier(credit$income, opposite = TRUE)
outlier(credit$loan)
outlier(credit$loan, opposite = TRUE)
setwd("~/Arquivos/Ensino/IA Expert/Cursos/Machine Learning e Data Science com R/Fontes")
base = read.csv('plano_saude.csv')
View(base)
correlation(base$idade, base$custo)
cor(base$idade, base$custo)
regressor = lm(formula = custo ~ idade, data = base)
View(regressor)
regressor.summary()
regressor.sum()
regressor.sumary
regressor.summary()
summary(regressor)
regressor$coefficients
regressor$coefficients[0]
b0 = regressor$coefficients[0]
b0 = regressor$coefficients[1]
regressor$coefficients
b0 = regressor$coefficients[0]
b0 = regressor$coefficients[1]
b1 = regressor$coefficients[2]
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = base$idade, y = base$custo),
colour = 'red') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() + geom_point(aes(x = base$idade, y = base$custo)) +
ggtitle('Regressão linear simples') +
xlab('Idade') + ylab('Custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
ggtitle('Regressão linear simples') +
xlab('Idade') + ylab('Custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
ggtitle('Idade x custo') +
xlab('Idade') + ylab('Custo')
previsoes = predict(regressor, X)
previsoes = predict(regressor, base$idade)
previsoes = predict(regressor, newdata = base$idade)
previsoes = predict(regressor, newdata = base)
previsoes
View(base)
previsoes = predict(regressor, newdata = base[-2])
previsoes
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(x = base$idade, y = previsoes), colour = 'red')
ggtitle('Idade x custo') +
xlab('Idade') + ylab('Custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(x = base$idade, y = previsoes), colour = 'red')
ggtitle('Idade x custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtitle('Idade x custo') +
xlab('Idade') + ylab('Custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtitle('Idade x custo') +
xlab('Idade') + ylab('Custo')
previsao1 = predict(regressor, newdata = 40)
idade = c(40)
df = data.frame(idade)
View(df)
previsao1 = predict(regressor, newdata = df)
previsao2 = b0 + b1 * 40
summary(regressor)
regressor$coefficients
regressor$effects
regressor$rank
summary(regressor)
View(regressor)
summary(regressor)$adj.r.squared
regressor$adj.r.squared
summary(regressor)$adj.r.squared
base = read.csv('house_prices.csv')
View(base)
divisao = sample.split(base$price, SplitRatio = 0.70)
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
View(base_treinamento)
View(base_treinamento)
regressor = lm(formula = price ~ sqft_living, data = base_treinamento)
summary(regressor)
previsoes_treinamento = predict(regressor, newdata = base_treinamento[6])
previsoes_treinamento
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
previsoes_teste = predict(regressor, newdata = base_teste[6])
previsoes_teste
resultado = base_teste[6] - previsoes_teste
View(resultado)
base_teste[6]
View(base_teste)
View(base_teste)
resultado = base_teste[3] - previsoes_teste
View(resultado)
resultado = abs(base_teste[3] - previsoes_teste)
View(resultado)
mean(resultado)
resultado.mean()
mean(resultado)
mean(resultado[0])
View(resultado)
mean(resultado['price'])
mean(resultado[['price']])
mae(base_teste[3], previsoes_teste)
install.packages('ensembleBMA')
MAE(base_teste[3], previsoes_teste)
mae(base_teste[3], previsoes_teste)
MAE(base_teste[3], previsoes_teste)
ggplot() + geom_point(aes(x = base_teste$sqft_living, y = base_teste$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
# visualização gráfico base de teste
ggplot() + geom_point(aes(x = base_teste$sqft_living, y = base_teste$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
install.packages('misTools')
install.packages('mixTools')
install.packages('mixtools')
install.packages('misctools')
install.packages('miscTools')
require(miscTools)
r2 <- rSquared(base_teste[3], resid = base_teste[3] - previsoes_teste)
r2 <- rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes_teste)
r3 <- rSquared(base_treinamento[['price']], resid = base_treinamento[['price']] - previsoes_treinamento)
base = read.csv('house_prices.csv')
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
View(base)
base$id = NULL
View(base_teste)
View(base)
base = read.csv('house_prices.csv')
base = read.csv('house_prices.csv')
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ ., data = base_treinamento)
summary(regressor)
View(base_teste)
previsoes = predict(regressor, newdata = base_teste[-1])
previsoes = predict(regressor, newdata = base_teste)
base = read.csv('house_prices.csv')
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ ., data = base_treinamento)
summary(regressor)
previsoes = predict(regressor, newdata = base_teste)
base_teste[-1]
previsoes = predict(regressor, newdata = base_teste)
previsoes = predict(regressor, newdata = base_teste[-1])
base = read.csv('house_prices.csv')
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ ., data = base_treinamento)
summary(regressor)
previsoes = predict(regressor, newdata = base_teste[-1])
mean(abs(base_teste[1] - previsoes))
mean(abs(base_teste[['price'] - previsoes))
mean(abs(base_teste[['price']] - previsoes))
library(miscTools)
r2 <- rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes_teste)
r2 <- rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes)
setwd("~/Cursos/Machine Learning e Data Science com R/regressão")
setwd("~/Cursos/Machine Learning e Data Science com R/regressão")
base = read.csv('plano_saude.csv')
View(base)
cor(base$idade, base$custo)
View(base)
summary(regressor)
base = read.csv('plano_saude.csv')
cor(base$idade, base$custo)
regressor = lm(formula = custo ~ idade, data = base)
summary(regressor)
b0 = regressor$coefficients[1]
b1 = regressor$coefficients[2]
cr = summary(regressor)$adj.r.squared
View(base)
View(base)
previsoes = predict(regressor, newdata = base[-2])
previsoes
library(ggplot2)
library(ggplot2)
ggplot() + geom_point(aes(x = base$idade, y = base$custo))
ggplot() + geom_point(aes(x = base$idade, y = base$custo)) +
geom_point(aes(x = base$idade, y = previsoes))
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(x = base$idade, y = previsoes), colour = 'red')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtile('Idade x custo') + xlab('Idade') + ylab('Custo')
ggplot() + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(x = base$idade, y = previsoes), colour = 'red') +
ggtitle('Idade x custo') + xlab('Idade') + ylab('Custo')
idade = c(40)
df = data.frame(idade)
View(df)
previsao1 = predict(regressor, newdata = df)
previsao2 = b0 + b1 * 40
setwd("~/Cursos/Machine Learning e Data Science com R/regressão")
base = read.csv('house_prices.csv')
View(base)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ sqft_living, data = base_treinamento)
View(regressor)
summary(regressor)
previsoes_treinamento = predict(regressor, newdata = base_treinamento[6])
previsoes_treinamento
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price))
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue')
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue') +
geom_point(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
ggplot() + geom_point(aes(x = base_treinamento$sqft_living, y = base_treinamento$price), colour = 'blue') +
geom_line(aes(x = base_treinamento$sqft_living, y = previsoes_treinamento), colour = 'red')
previsoes_teste = predict(regressor, newdata = base_teste[6])
previsoes_teste
View(base_teste)
resultado = base_teste[3] - previsoes_teste
View(resultado)
resultado = abs(base_teste[3] - previsoes_teste)
View(resultado)
View(resultado)
mean(resultado[['price']])
summary(regressor)
cr = rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes_teste)
setwd("~/Cursos/Machine Learning e Data Science com R/regressão")
base = read.csv('house_prices.csv')
View(base)
base$id = NULL
View(base)
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
View(base)
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
View(base)
regressor = lm(formula = price ~ ., data = base_treinamento)
View(regressor)
summary(regressor)
View(base_teste)
previsoes = predict(regressor, newdata = base_teste[-1])
View(base)
base$sqft_basement = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$price, SplitRatio = 0.70)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
regressor = lm(formula = price ~ ., data = base_treinamento)
summary(regressor)
previsoes = predict(regressor, newdata = base_teste[-1])
previsoes
View(base_teste)
mean(abs(base_teste[['price']] - previsoes))
summary(regressor)
library(miscTools)
cc = rSquared(base_teste[['price']], resid = base_teste[['price']] - previsoes)
setwd("~/Cursos/Machine Learning e Data Science com R/outliers")
setwd("~/Cursos/Machine Learning e Data Science com R/outliers")
base = read.csv('credit_data.csv')
View(base)
boxplot(base$age)
boxplot.stats(base$age)$out
View(base)
boxplot(base$age, outline = FALSE)
boxplot(base$age, outline = TRUE)
outlier_age = base[base$age < 0, ]
View(outlier_age)
boxplot(base$loan)
boxplot.stats(base$loan)$out
outliers_loan = base[base$loan > 13100]
outliers_loan = base[base$loan > 13100,]
View(outliers_loan)
boxplot(base$income)
setwd("~/Cursos/Machine Learning e Data Science com R/outliers")
credit = read.csv('credit_data.csv')
census = read.csv('census.csv')
View(credit)
View(census)
plot(credit$income, credit$age)
plot(credit$income, credit$loan)
plot(credit$age, credit$loan)
base$age = ifelse(base$age < 0, 40.92, base$age)
credit$age = ifelse(credit$age < 0, 40.92, credit$age)
View(credit)
plot(credit$income, credit$age)
plot(credit$income, credit$loan)
plot(credit$age, credit$loan)
View(census)
plot(census$age, census$final.weight)
setwd("~/Cursos/Machine Learning e Data Science com R/outliers")
credit = read.csv('credit_data.csv')
census = read.csv('census.csv')
View(credit)
View(census)
library(outliers)
outlier(credit$age)
View(credit)
outlier(credit$age, opposite = TRUE)
outlier(credit$income)
outlier(credit$income, opposite = TRUE)
outlier(credit$loan)
outlier(credit$loan, opposite = TRUE)
outlier(census$age)
outlier(census$final.weight)
outlier(census$final.weight)
